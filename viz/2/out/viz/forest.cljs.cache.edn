{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name viz.forest, :imports nil, :requires {grid viz.grid, viz.grid viz.grid}, :uses nil, :defs {get-node-meta {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 75, :column 7, :end-line 75, :end-column 20, :arglists (quote ([forest id]))}, :name viz.forest/get-node-meta, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 20, :method-params ([forest id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest id]))}, get-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 78, :column 7, :end-line 78, :end-column 15, :arglists (quote ([forest id]))}, :name viz.forest/get-node, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 15, :method-params ([forest id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest id]))}, add-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 45, :column 7, :end-line 45, :end-column 15, :arglists (quote ([forest pos]))}, :name viz.forest/add-node, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 15, :method-params ([forest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest pos]))}, set-parent {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 25, :column 8, :end-line 25, :end-column 18, :private true, :arglists (quote ([forest id parent-id]))}, :private true, :name viz.forest/set-parent, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 18, :method-params ([forest id parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest id parent-id]))}, new-id {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 12, :column 8, :end-line 12, :end-column 14, :private true, :arglists (quote ([forest]))}, :private true, :name viz.forest/new-id, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 14, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, root? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 90, :column 7, :end-line 90, :end-column 12, :arglists (quote ([node]))}, :name viz.forest/root?, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 12, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, empty-adjacent-points {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 42, :column 7, :end-line 42, :end-column 28, :arglists (quote ([forest pos]))}, :name viz.forest/empty-adjacent-points, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 28, :method-params ([forest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest pos]))}, new-forest {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 5, :column 7, :end-line 5, :end-column 17, :arglists (quote ([grid-def]))}, :name viz.forest/new-forest, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 17, :method-params ([grid-def]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid-def]))}, remove-node {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 56, :column 7, :end-line 56, :end-column 18, :arglists (quote ([forest id]))}, :name viz.forest/remove-node, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 18, :method-params ([forest id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest id]))}, spawn-child {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([forest parent-id pos]))}, :name viz.forest/spawn-child, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 18, :method-params ([forest parent-id pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest parent-id pos]))}, lines {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 95, :column 7, :end-line 95, :end-column 12, :arglists (quote ([forest]))}, :name viz.forest/lines, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 12, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, unset-parent {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 17, :column 8, :end-line 17, :end-column 20, :private true, :arglists (quote ([forest id parent-id]))}, :private true, :name viz.forest/unset-parent, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 20, :method-params ([forest id parent-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest id parent-id]))}, roots {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 89, :column 7, :end-line 89, :end-column 12, :arglists (quote ([forest]))}, :name viz.forest/roots, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 12, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, leaves {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 92, :column 7, :end-line 92, :end-column 13, :arglists (quote ([forest]))}, :name viz.forest/leaves, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 13, :method-params ([forest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([forest]))}, update-node-meta {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 72, :column 7, :end-line 72, :end-column 23, :arglists (quote ([forest id f]))}, :name viz.forest/update-node-meta, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 23, :method-params ([forest id f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forest id f]))}, leaf? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 93, :column 7, :end-line 93, :end-column 12, :arglists (quote ([node]))}, :name viz.forest/leaf?, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 12, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, node-at-pos? {:protocol-inline nil, :meta {:file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :line 39, :column 7, :end-line 39, :end-column 19, :arglists (quote ([forest pos]))}, :name viz.forest/node-at-pos?, :variadic false, :file "/home/mediocregopher/src/viz/src/viz/forest.cljs", :end-column 19, :method-params ([forest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([forest pos]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:meta :next-id :grid :parent-pos :pos :roots :leaves :nodes :id :parent-id :child-ids}, :order [:grid :nodes :roots :leaves :next-id :parent-id :parent-pos :child-ids :pos :id :meta]}, :doc nil}